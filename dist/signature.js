"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;var _path = _interopRequireDefault(require("path"));
var xmldsigjs = _interopRequireWildcard(require("xmldsigjs"));

var _dataElement = _interopRequireDefault(require("./data-element"));
var _fileManager = _interopRequireDefault(require("./file-manager"));
var _signatureManifest = _interopRequireDefault(require("./signature-manifest"));
var _signatureSignedInfo = _interopRequireDefault(require("./signature-signed-info"));
var _signatureValue = _interopRequireDefault(require("./signature-value"));
var _xml = require("./utils/xml");function _getRequireWildcardCache() {if (typeof WeakMap !== "function") return null;var cache = new WeakMap();_getRequireWildcardCache = function _getRequireWildcardCache() {return cache;};return cache;}function _interopRequireWildcard(obj) {if (obj && obj.__esModule) {return obj;}if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {return { "default": obj };}var cache = _getRequireWildcardCache();if (cache && cache.has(obj)) {return cache.get(obj);}var newObj = {};var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var key in obj) {if (Object.prototype.hasOwnProperty.call(obj, key)) {var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;if (desc && (desc.get || desc.set)) {Object.defineProperty(newObj, key, desc);} else {newObj[key] = obj[key];}}}newObj["default"] = obj;if (cache) {cache.set(obj, newObj);}return newObj;}function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}function _typeof(obj) {"@babel/helpers - typeof";if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};}return _typeof(obj);}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _inherits(subClass, superClass) {if (typeof superClass !== "function" && superClass !== null) {throw new TypeError("Super expression must either be null or a function");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === "object" || typeof call === "function")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === "undefined" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === "function") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}

/**
his class manages the Signature node within the parent signatures.xml > signature node.
ote: the signature w3 spec uses snake case on names and attributes
var
Signature = /*#__PURE__*/function (_DataElement) {_inherits(Signature, _DataElement);var _super = _createSuper(Signature);
  function Signature() {var _this;var epubLocation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "sig";_classCallCheck(this, Signature);
    // Note that the Signature and children tags need to be capitalized

    _this = _super.call(this, "Signature", undefined, {
      id: id,
      xmlns: "http://www.w3.org/2000/09/xmldsig#" });


    _this.signedInfo = new _signatureSignedInfo["default"]();
    _this.signatureValue = new _signatureValue["default"]();
    _this.keyInfo = new _dataElement["default"]("KeyInfo");
    _this.object = new _dataElement["default"]("Object");
    _this.object.manifest = new _signatureManifest["default"]();
    _this.epubLocation = epubLocation;return _this;
  }

  /**
     * This will create a complete signature to add to the signatures.xml.
     * Often, the signatures.xml file itself would not be included in the manifest,
     * however to allow validation of the signature.xml file itelf, the envelope
     * transform can be used. In this case, adding or removing a signature
     * invalidates the signatures.xml file.
     *
     * The envelope transform removes the whole signature element containing the
     * transform from the signing process. In a Signatures.xml file, any previous
     * Signature nodes will be included in the signing.
     *
     * see:
     * https://www.w3.org/publishing/epub32/epub-ocf.html#sec-container-metainf-signatures.xml
     * https://www.w3.org/TR/xmldsig-core/#sec-EnvelopedSignature
     *
     * In the situation where epub watermarking chain of custody is desired,
     * each previous signatures.xml signature should be retained for self-validation against
     * the digest hash of the signature's manifest, but have the signature iteslf become
     * invalidated. Each subsequent signature will be signed with the full
     * signature history, recording a secure chain of signatures.
     */

  /**
         * Sign the signature
         * Signing with a privateKey should only be allowed in a node environment
         * https://github.com/PeculiarVentures/xmldsigjs#creating-a-xmldsig-signature
         * https://www.w3.org/TR/WebCryptoAPI/#algorithms
         * https://www.w3.org/TR/xmldsig-core/#sec-KeyValue
         */_createClass(Signature, [{ key: "sign", value: function () {var _sign = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(
      privateKey, publicKey) {var signer, rawXml, xmlData, algorithm, options, xmlsigjsXml, reparsedXmlData, signatureValueData, keyInfoData;return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:
                signer = new xmldsigjs.SignedXml();

                // https://nodejs.org/api/crypto.html#crypto_crypto_generatekeypair_type_options_callback
                // see https://www.w3.org/TR/xmldsig-core/#sec-KeyValue
                // const privateKey = undefined;
                // const publicKey = undefined;
                _context.next = 3;return (
                  this.object.manifest.getXml());case 3:rawXml = _context.sent;
                xmlData = xmldsigjs.Parse(rawXml);
                algorithm = { name: "RSASSA-PKCS1-v1_5" };
                options = {
                  id: this.id, // id of signature
                  keyValue: publicKey,
                  references: [
                  {
                    id: "ref_id", // ref id,
                    uri: "#".concat(this.object.manifest.id), // ref uri
                    hash: "SHA-256", // hash algo to use
                    transforms: ["c14n"] // array of transforms to use
                  }] };_context.next = 9;return (


                  signer.Sign(algorithm, privateKey, xmlData, options));case 9:

                // TODO find better allternative to this is hacky way to interoperate between xml2js and xmlsigjs's own xml lib.
                xmlsigjsXml = signer.toString();_context.next = 12;return (
                  (0, _xml.parseXml)(xmlsigjsXml));case 12:reparsedXmlData = _context.sent;

                signatureValueData = reparsedXmlData['ds:signature']['ds:signaturevalue'];
                keyInfoData = reparsedXmlData['ds:signature']['ds:keyinfo'];_context.next = 17;return (

                  this.parseXmlObj({ SignatureValue: signatureValueData }));case 17:this.signatureValue = _context.sent;_context.next = 20;return (
                  this.parseXmlObj({ KeyInfo: keyInfoData }));case 20:this.keyInfo = _context.sent;

                console.log("Sign result", this.getXml(true));case 22:case "end":return _context.stop();}}}, _callee, this);}));function sign(_x, _x2) {return _sign.apply(this, arguments);}return sign;}()


    /**
                                                                                                                                                                                                              * Look for file in manifest and update the reference if it exists, otherwise create a new reference
                                                                                                                                                                                                              * @param {string} location location of file, relative to epub root
                                                                                                                                                                                                              * @param {array} transforms array of xmldsigjs transforms
                                                                                                                                                                                                              * @param {string} digestMethod xmldsigjs diest method
                                                                                                                                                                                                              * @param {string} digestValue option base64 encoded digest value. A new digest will be generated if omited
                                                                                                                                                                                                              */ }, { key: "addOrUpdateManifestReference", value: function () {var _addOrUpdateManifestReference = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(

      location) {var transforms,digestMethod,digestValue,existing,_args2 = arguments;return regeneratorRuntime.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:
                transforms = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : ["http://www.w3.org/TR/2001/REC-xml-c14n-2001031"];
                digestMethod = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : "http://www.w3.org/2001/04/xmlenc#sha256";
                digestValue = _args2.length > 3 && _args2[3] !== undefined ? _args2[3] : undefined;

                existing = this.manifest.getReference(location);if (!

                existing) {_context2.next = 15;break;}
                existing.uri = location;
                existing.transforms = transforms;
                existing.digestMethod = digestMethod;if (
                digestValue) {_context2.next = 12;break;}_context2.next = 11;return (
                  this.generateFileDigest(location, digestMethod));case 11:digestValue = _context2.sent;case 12:

                existing.digestValue = digestValue;_context2.next = 17;break;case 15:_context2.next = 17;return (

                  this.addManifestReference(
                  location,
                  transforms,
                  digestMethod,
                  digestValue));case 17:case "end":return _context2.stop();}}}, _callee2, this);}));function addOrUpdateManifestReference(_x3) {return _addOrUpdateManifestReference.apply(this, arguments);}return addOrUpdateManifestReference;}()




    /**
                                                                                                                                                                                                                                                      * Create a base64 encoded digest hash of a file.
                                                                                                                                                                                                                                                      * https://www.w3.org/TR/2008/REC-xmldsig-core-20080610/#sec-EnvelopedSignature
                                                                                                                                                                                                                                                      * @param {string} location the location of the file relative to the epub root
                                                                                                                                                                                                                                                      */ }, { key: "generateFileDigest", value: function () {var _generateFileDigest = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(
      location, digestMethod) {var xmlExts, digest, fileExt, resolvedLocation, data, fileData, transform, node, digestValue, base64Digest;return regeneratorRuntime.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:
                xmlExts = [".xml", ".xhtml", "html", ".opf", ".ncx"];

                digest = xmldsigjs.CryptoConfig.CreateHashAlgorithm(digestMethod);

                fileExt = _path["default"].extname(location);

                resolvedLocation = _path["default"].resolve(this.epubLocation, location);if (!




                xmlExts.includes(fileExt)) {_context3.next = 15;break;}_context3.next = 7;return (


                  _fileManager["default"].readFile(resolvedLocation, "utf8"));case 7:fileData = _context3.sent;

                if (!fileData) {
                  console.error("Error: file could not be loaded", resolvedLocation);
                }

                transform = new xmldsigjs.XmlDsigC14NTransform();
                node = xmldsigjs.Parse(fileData).documentElement;
                transform.LoadInnerXml(node);
                data = transform.GetOutput();_context3.next = 18;break;case 15:_context3.next = 17;return (



                  _fileManager["default"].readFile(resolvedLocation));case 17:data = _context3.sent;case 18:_context3.prev = 18;_context3.next = 21;return (



                  digest.Digest(data));case 21:digestValue = _context3.sent;

                // the fileHash should be represented as a base64 string
                base64Digest = Buffer.from(digestValue).toString("base64");return _context3.abrupt("return",
                base64Digest);case 26:_context3.prev = 26;_context3.t0 = _context3["catch"](18);

                console.error("error hashing file", _context3.t0);return _context3.abrupt("return");case 30:case "end":return _context3.stop();}}}, _callee3, this, [[18, 26]]);}));function generateFileDigest(_x4, _x5) {return _generateFileDigest.apply(this, arguments);}return generateFileDigest;}()



    /**
                                                                                                                                                                                                                                                                                                             * Add a manifest reference to the signature. Using an Object > Manifest is the recommended signature form
                                                                                                                                                                                                                                                                                                             * in the epub spec. see: https://www.w3.org/publishing/epub32/epub-ocf.html#sec-container-metainf-signatures.xml
                                                                                                                                                                                                                                                                                                             * A comment in the example notes that xml/html files should be canonicalized before the digest is produced -
                                                                                                                                                                                                                                                                                                             * that is the approach taken below.
                                                                                                                                                                                                                                                                                                             *
                                                                                                                                                                                                                                                                                                             * TODO! this does not apply the transforms. Currently all xml files are normalized downstream.
                                                                                                                                                                                                                                                                                                             * (see generateFileDigest above). or that transforms happened upstream and included in provided digestValue
                                                                                                                                                                                                                                                                                                             *
                                                                                                                                                                                                                                                                                                             * Note that WebCrypto does not accept streams, so the entire file must be loaded into memory. Node has a 1gb
                                                                                                                                                                                                                                                                                                             * file size limit (?) - so large files cannot be digested.
                                                                                                                                                                                                                                                                                                             * see:
                                                                                                                                                                                                                                                                                                             * https://developer.mozilla.org/en-US/docs/Web/API/SubtleCrypto/digest
                                                                                                                                                                                                                                                                                                             * https://github.com/w3c/webcrypto/issues/
                                                                                                                                                                                                                                                                                                             * https://www.w3.org/TR/2008/REC-xmldsig-core-20080610/#sec-EnvelopedSignature
                                                                                                                                                                                                                                                                                                             *
                                                                                                                                                                                                                                                                                                             * @param {string} location - path to the resource, relative to the epub root
                                                                                                                                                                                                                                                                                                             * @param {string} digestMethod - the digest standard to use. see https://github.com/PeculiarVentures/xmldsigjs
                                                                                                                                                                                                                                                                                                             */ }, { key: "addManifestReference", value: function () {var _addManifestReference = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(

      location) {var transforms,digestMethod,digestValue,base64Digest,_args4 = arguments;return regeneratorRuntime.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:
                transforms = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : ["http://www.w3.org/TR/2001/REC-xml-c14n-2001031"];
                digestMethod = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : "http://www.w3.org/2001/04/xmlenc#sha256";
                digestValue = _args4.length > 3 && _args4[3] !== undefined ? _args4[3] : undefined;if (!

                digestValue) {_context4.next = 7;break;}
                // if digestValue is provided, use that
                this.object.manifest.addReference(
                location,
                transforms,
                digestMethod,
                digestValue);_context4.next = 11;break;case 7:_context4.next = 9;return (



                  this.generateFileDigest(
                  location,
                  digestMethod));case 9:base64Digest = _context4.sent;


                if (base64Digest) {
                  this.object.manifest.addReference(
                  location,
                  transforms,
                  digestMethod,
                  base64Digest);

                }case 11:case "end":return _context4.stop();}}}, _callee4, this);}));function addManifestReference(_x6) {return _addManifestReference.apply(this, arguments);}return addManifestReference;}() }]);return Signature;}(_dataElement["default"]);exports["default"] = Signature;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,