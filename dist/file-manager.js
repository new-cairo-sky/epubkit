"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports["default"] = void 0;var _fs = _interopRequireDefault(require("fs"));
var _os = _interopRequireDefault(require("os"));
var _path = _interopRequireDefault(require("path"));
var _fileSaver = _interopRequireDefault(require("file-saver"));

var _es6Promisify = require("es6-promisify");
var _xml2js = _interopRequireDefault(require("xml2js"));
var _jszip = _interopRequireDefault(require("jszip"));

var _packageManager = _interopRequireDefault(require("./package-manager"));
var _opfToBrowserFsIndex = require("./utils/opf-to-browser-fs-index");function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { "default": obj };}function _defineProperty(obj, key, value) {if (key in obj) {Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });} else {obj[key] = value;}return obj;}function _createForOfIteratorHelper(o, allowArrayLike) {var it;if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {if (it) o = it;var i = 0;var F = function F() {};return { s: F, n: function n() {if (i >= o.length) return { done: true };return { done: false, value: o[i++] };}, e: function e(_e) {throw _e;}, f: F };}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");}var normalCompletion = true,didErr = false,err;return { s: function s() {it = o[Symbol.iterator]();}, n: function n() {var step = it.next();normalCompletion = step.done;return step;}, e: function e(_e2) {didErr = true;err = _e2;}, f: function f() {try {if (!normalCompletion && it["return"] != null) it["return"]();} finally {if (didErr) throw err;}} };}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === "string") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === "Object" && o.constructor) n = o.constructor.name;if (n === "Map" || n === "Set") return Array.from(o);if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {Promise.resolve(value).then(_next, _throw);}}function _asyncToGenerator(fn) {return function () {var self = this,args = arguments;return new Promise(function (resolve, reject) {var gen = fn.apply(self, args);function _next(value) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);}function _throw(err) {asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);}_next(undefined);});};}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}

/**
ost of the nasty details in managing the different environments is
contained in here.
his class wraps a lot of the node fs file system library methods.
or browser clients, the BroswerFS module is used to emulate Node FS and
ileSaver is used to enable client's to download documents for saving.
rowserFS does not pollyfill the fs native promises, so many fs methods
are wrapped with promisify below.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *
see also:
https://github.com/jvilk/BrowserFS
https://github.com/browserify/path-browserify

var
FileManager = /*#__PURE__*/function () {function FileManager() {_classCallCheck(this, FileManager);}_createClass(FileManager, null, [{ key: "loadEpub", value: function () {var _loadEpub = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(
















      location) {var fetchOptions,workingPath,_workingPath,_args = arguments;return regeneratorRuntime.wrap(function _callee$(_context) {while (1) {switch (_context.prev = _context.next) {case 0:fetchOptions = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};if (!
                FileManager.isEpubArchive(location)) {_context.next = 8;break;}_context.next = 4;return (
                  FileManager.prepareEpubArchive(
                  location,
                  fetchOptions));case 4:workingPath = _context.sent;return _context.abrupt("return",

                workingPath);case 8:_context.next = 10;return (

                  FileManager.prepareEpubDir(
                  location,
                  fetchOptions));case 10:_workingPath = _context.sent;return _context.abrupt("return",

                _workingPath);case 12:case "end":return _context.stop();}}}, _callee);}));function loadEpub(_x) {return _loadEpub.apply(this, arguments);}return loadEpub;}()



    /**
                                                                                                                                                                               * Saves the epub archive to the given location. In the browser,
                                                                                                                                                                               * the user will be prompted to set the file download location.
                                                                                                                                                                               * This method relies on JSZip for ziping the archive in both client and node
                                                                                                                                                                               * TODO: if testing shows that JSZip is not best for node, consider using
                                                                                                                                                                               * archiver: https://github.com/archiverjs/node-archiver
                                                                                                                                                                               * epub zip spec: https://www.w3.org/publishing/epub3/epub-ocf.html#sec-zip-container-zipreqs
                                                                                                                                                                               * @param {string} location - destination path to save epub to
                                                                                                                                                                               * @param {boolean} compress - flag to enable archive compression
                                                                                                                                                                               */ }, { key: "saveEpubArchive", value: function () {var _saveEpubArchive = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(
      sourceLocation, saveLocation) {var compress,pathInfo,epubName,zip,filePaths,mimeTypeContent,_iterator,_step,filePath,contents,relativePath,zipContent,result,_args2 = arguments;return regeneratorRuntime.wrap(function _callee2$(_context2) {while (1) {switch (_context2.prev = _context2.next) {case 0:compress = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : false;
                pathInfo = _path["default"].parse(saveLocation);
                epubName = pathInfo.name;

                zip = new _jszip["default"]();_context2.next = 6;return (
                  FileManager.findAllFiles(sourceLocation));case 6:filePaths = _context2.sent;_context2.next = 9;return (


                  FileManager.readFile(
                  _path["default"].resolve(sourceLocation, "mimetype")));case 9:mimeTypeContent = _context2.sent;

                zip.file("mimetype", mimeTypeContent);

                // to run in parallel see: https://stackoverflow.com/a/50874507/7943589
                _iterator = _createForOfIteratorHelper(filePaths);_context2.prev = 12;_iterator.s();case 14:if ((_step = _iterator.n()).done) {_context2.next = 30;break;}filePath = _step.value;_context2.next = 18;return (
                  FileManager.readFile(filePath));case 18:contents = _context2.sent;
                // convert the absolute path to the internal epub path
                relativePath = filePath.substring(
                "".concat(_path["default"].normalize(sourceLocation)).length);

                if (relativePath.substring(0, 1) === "/") {
                  relativePath = relativePath.substring(1);
                }if (!(
                relativePath !== "mimetype")) {_context2.next = 28;break;}if (!
                contents) {_context2.next = 26;break;}
                zip.file("".concat(relativePath), contents);_context2.next = 28;break;case 26:

                console.error("Could not read contents of file", filePath);return _context2.abrupt("return");case 28:_context2.next = 14;break;case 30:_context2.next = 35;break;case 32:_context2.prev = 32;_context2.t0 = _context2["catch"](12);_iterator.e(_context2.t0);case 35:_context2.prev = 35;_iterator.f();return _context2.finish(35);case 38:_context2.prev = 38;_context2.next = 41;return (








                  zip.generateAsync({
                    type: FileManager.environment === "browser" ? "blob" : "nodebuffer",
                    compression: compress ? "DEFLATE" : "STORE",
                    compressionOptions: {
                      level: compress ?
                      8 :
                      0 /* only levels 0 or 8 are allowed in epub spec */ } }));case 41:zipContent = _context2.sent;_context2.next = 47;break;case 44:_context2.prev = 44;_context2.t1 = _context2["catch"](38);



                console.log("Error at zip.generateAsync ", _context2.t1);case 47:if (!


                zipContent) {_context2.next = 70;break;}if (!(


                FileManager.environment === "browser")) {_context2.next = 59;break;}_context2.prev = 49;

                result = _fileSaver["default"].saveAs(zipContent, pathInfo.base);_context2.next = 57;break;case 53:_context2.prev = 53;_context2.t2 = _context2["catch"](49);

                console.error("Error saving epub", _context2.t2);return _context2.abrupt("return");case 57:_context2.next = 68;break;case 59:_context2.prev = 59;_context2.next = 62;return (




                  (0, _es6Promisify.promisify)(_fs["default"].writeFile)(saveLocation, zipContent));case 62:_context2.next = 68;break;case 64:_context2.prev = 64;_context2.t3 = _context2["catch"](59);

                console.log("Error writing zip file:", _context2.t3);return _context2.abrupt("return");case 68:_context2.next = 71;break;case 70:




                console.error("Error generating zip file.");case 71:case "end":return _context2.stop();}}}, _callee2, null, [[12, 32, 35, 38], [38, 44], [49, 53], [59, 64]]);}));function saveEpubArchive(_x2, _x3) {return _saveEpubArchive.apply(this, arguments);}return saveEpubArchive;}()



    /**
                                                                                                                                                                                                                                                                                                  * When loading an Epub directory in a browser client, the files
                                                                                                                                                                                                                                                                                                  * are fetched lazily by BrowserFS and saved to localStorage.
                                                                                                                                                                                                                                                                                                  *
                                                                                                                                                                                                                                                                                                  * @param {string} location
                                                                                                                                                                                                                                                                                                  */ }, { key: "prepareEpubDir", value: function () {var _prepareEpubDir = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(
      location) {var fetchOptions,prefixUrl,containerLocation,containerUrl,response,containerData,manifestPath,_result$container,_result$container$roo,result,opfLocation,opfFetchResponse,opfData,packageManager,manifestItems,fsManifestPath,fileIndex,_options,_result,workingPath,tmpDir,epubDirName,tmpPath,_workingPath2,_args3 = arguments;return regeneratorRuntime.wrap(function _callee3$(_context3) {while (1) {switch (_context3.prev = _context3.next) {case 0:fetchOptions = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};if (!(
                FileManager.environment === "browser")) {_context3.next = 58;break;}
                /*
                                                                                     For the browser we need to build a file index for BrowserFS 
                                                                                     That index is derived from the OPF file so we must find the opf
                                                                                     path given in the container.xml file. 
                                                                                     There is a chicken and egg problem in that BrowserFS can not be 
                                                                                     initialized without the file index, so we must preload the container.xml
                                                                                     and OPF file first. 
                                                                                     */
                prefixUrl = _path["default"].resolve(location);
                containerLocation = "./META-INF/container.xml";
                containerUrl = _path["default"].resolve(location, containerLocation);_context3.next = 7;return (
                  fetch(containerUrl, fetchOptions));case 7:response = _context3.sent;if (

                response.ok) {_context3.next = 11;break;}
                console.error("Error fetching container.xml");return _context3.abrupt("return");case 11:_context3.next = 13;return (


                  response.text());case 13:containerData = _context3.sent;
                console.log("containerData", containerData);_context3.prev = 15;_context3.next = 18;return (



                  (0, _es6Promisify.promisify)(_xml2js["default"].parseString)(containerData));case 18:result = _context3.sent;

                manifestPath =
                result === null || result === void 0 ? void 0 : (_result$container = result.container) === null || _result$container === void 0 ? void 0 : (_result$container$roo = _result$container.rootfiles[0].rootfile[0]) === null || _result$container$roo === void 0 ? void 0 : _result$container$roo.$["full-path"];if (
                manifestPath) {_context3.next = 23;break;}
                console.error("Could not find path to opf file.");return _context3.abrupt("return");case 23:_context3.next = 29;break;case 25:_context3.prev = 25;_context3.t0 = _context3["catch"](15);



                console.error("Error parsing container.xml file:", _context3.t0);return _context3.abrupt("return");case 29:



                opfLocation = _path["default"].resolve(location, manifestPath);_context3.next = 32;return (
                  fetch(opfLocation, fetchOptions));case 32:opfFetchResponse = _context3.sent;_context3.next = 35;return (
                  opfFetchResponse.text());case 35:opfData = _context3.sent;
                packageManager = new _packageManager["default"](manifestPath);_context3.next = 39;return (
                  packageManager.loadXml(opfData));case 39:
                manifestItems = packageManager.manifest.items;

                fsManifestPath = _path["default"].join(location, manifestPath);
                fileIndex = (0, _opfToBrowserFsIndex.opfManifestToBrowserFsIndex)(
                manifestItems,
                manifestPath);

                console.log("Mounting epub directory with BrowserFS", location);
                console.log("file index", JSON.parse(JSON.stringify(fileIndex)));_context3.prev = 44;_context3.next = 47;return (


                  (0, _es6Promisify.promisify)(BrowserFS.configure)({
                    fs: "MountableFileSystem",
                    options: (_options = {}, _defineProperty(_options,
                    FileManager.virtualPath + "/overlay", {
                      fs: "OverlayFS",
                      options: {
                        readable: {
                          fs: "HTTPRequest",
                          options: {
                            baseUrl: prefixUrl,
                            index: fileIndex /* a json directory structure */ } },


                        writable: {
                          fs: "LocalStorage" } } }), _defineProperty(_options,



                    "/tmp", { fs: "InMemory" }), _options) }));case 47:_result = _context3.sent;_context3.next = 54;break;case 50:_context3.prev = 50;_context3.t1 = _context3["catch"](44);



                console.error("Error configuring BrowserFS:", _context3.t1.message);return _context3.abrupt("return");case 54:


                // fs.readdir("./epubkit/overlay/test/alice/META-INF", (err, files) => {
                //   files.forEach((file) => {
                //     console.log(":", file);
                //   });
                // });

                // return the virtual path to the epub root
                workingPath = _path["default"].normalize("".concat(FileManager.virtualPath, "/overlay/"));return _context3.abrupt("return",
                workingPath);case 58:_context3.prev = 58;_context3.next = 61;return (




                  FileManager.getTmpDir());case 61:tmpDir = _context3.sent;_context3.next = 67;break;case 64:_context3.prev = 64;_context3.t2 = _context3["catch"](58);throw _context3.t2;case 67:




                epubDirName = location.split(_path["default"].sep).pop();

                tmpPath = _path["default"].resolve(tmpDir, "".concat(epubDirName, "_").concat(Date.now()));_context3.next = 71;return (
                  FileManager.dirExists(tmpPath));case 71:if (!_context3.sent) {_context3.next = 81;break;}_context3.prev = 72;_context3.next = 75;return (

                  (0, _es6Promisify.promisify)(_fs["default"].rmdir)(tmpPath, {
                    recursive: true,
                    maxRetries: 3 }));case 75:_context3.next = 81;break;case 77:_context3.prev = 77;_context3.t3 = _context3["catch"](72);


                console.log("Could not remove dir", tmpPath, _context3.t3.message);throw (
                  "Could not prepare directory. Tmp director already exists and could not be removed.");case 81:_context3.prev = 81;_context3.next = 84;return (



                  FileManager.copyDir(location, tmpPath));case 84:_context3.next = 90;break;case 86:_context3.prev = 86;_context3.t4 = _context3["catch"](81);

                console.error(
                "prepareEpubDir Error: Could not copy dir to",
                tmpPath,
                _context3.t4.message);return _context3.abrupt("return");case 90:




                _workingPath2 = _path["default"].normalize(tmpPath);return _context3.abrupt("return",
                _workingPath2);case 92:case "end":return _context3.stop();}}}, _callee3, null, [[15, 25], [44, 50], [58, 64], [72, 77], [81, 86]]);}));function prepareEpubDir(_x4) {return _prepareEpubDir.apply(this, arguments);}return prepareEpubDir;}()



    /**
                                                                                                                                                                                                                                                               * Loads and unarchives an .epub file to a tmp working directory
                                                                                                                                                                                                                                                               * When in browser client, BrowserFS will unzip the archive to the virtual path `${FileManager.virtualPath}/zip`
                                                                                                                                                                                                                                                               *
                                                                                                                                                                                                                                                               * @param {string} location - the url or path to an .epub file
                                                                                                                                                                                                                                                               * @returns {string} - the path to the tmp location
                                                                                                                                                                                                                                                               */ }, { key: "prepareEpubArchive", value: function () {var _prepareEpubArchive = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(
      location) {var fetchOptions,isEpub,_options2,response,zipData,Buffer,workingDir,result,workingPath,tmpDir,tmpPath,AdmZip,_workingPath3,_args4 = arguments;return regeneratorRuntime.wrap(function _callee4$(_context4) {while (1) {switch (_context4.prev = _context4.next) {case 0:fetchOptions = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};
                isEpub = FileManager.isEpubArchive(location);if (

                isEpub) {_context4.next = 5;break;}
                console.warn("File is not an epub", location);return _context4.abrupt("return");case 5:if (!(



                FileManager.environment === "browser")) {_context4.next = 26;break;}
                // if running in client, use BrowserFS to mount Zip as file system in memory
                console.log("Mounting epub archive with BrowserFS", location);_context4.next = 9;return (
                  fetch(location, fetchOptions));case 9:response = _context4.sent;_context4.next = 12;return (
                  response.arrayBuffer());case 12:zipData = _context4.sent;
                Buffer = BrowserFS.BFSRequire("buffer").Buffer;
                workingDir = _path["default"].parse(location).name;_context4.next = 17;return (
                  (0, _es6Promisify.promisify)(BrowserFS.configure)({
                    fs: "MountableFileSystem",
                    options: (_options2 = {}, _defineProperty(_options2, "".concat(
                    FileManager.virtualPath, "/overlay/").concat(workingDir), {
                      fs: "OverlayFS",
                      options: {
                        readable: {
                          fs: "ZipFS",
                          options: {
                            // Wrap as Buffer object.
                            zipData: Buffer.from(zipData) } },


                        writable: {
                          fs: "LocalStorage" } } }), _defineProperty(_options2,



                    "/tmp", { fs: "InMemory" }), _options2) }));case 17:result = _context4.sent;if (!



                result) {_context4.next = 21;break;}
                // An error occurred.
                console.warn("Error at BrowserFS.configure", result.message);throw (
                  result);case 21:

                _fs["default"].readdir("./epubkit/overlay", function (err, files) {
                  console.log("files", files);
                });
                // return the virtual path to the epub root
                workingPath = _path["default"].normalize("".concat(
                FileManager.virtualPath, "/overlay/").concat(workingDir));return _context4.abrupt("return",

                workingPath);case 26:

                // when running in Node, decompress epub to tmp directory.
                tmpDir = _os["default"].tmpdir();
                tmpPath = _path["default"].resolve(tmpDir, _path["default"].basename(location));
                AdmZip = new AdmZip(location);
                AdmZip.extractAllTo(tmpPath, true);
                _workingPath3 = tmpPath;return _context4.abrupt("return",
                _workingPath3);case 32:case "end":return _context4.stop();}}}, _callee4);}));function prepareEpubArchive(_x5) {return _prepareEpubArchive.apply(this, arguments);}return prepareEpubArchive;}()



    /**
                                                                                                                                                                                                                 * Test if file is a .epub archive
                                                                                                                                                                                                                 * @param {string} location - path to file
                                                                                                                                                                                                                 * @returns {boolean}
                                                                                                                                                                                                                 */ }, { key: "isEpubArchive", value: function isEpubArchive(
    location) {
      var ext = _path["default"].extname(location);

      if (ext === ".epub") {
        return true;
      }

      return false;
    }

    /**
       * A wrapepr for the fs.stat method
       * @param {string} location
       * @returns {object} - stats object
       */ }, { key: "getStats", value: function () {var _getStats = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(
      location) {var stats;return regeneratorRuntime.wrap(function _callee5$(_context5) {while (1) {switch (_context5.prev = _context5.next) {case 0:_context5.prev = 0;_context5.next = 3;return (



                  (0, _es6Promisify.promisify)(_fs["default"].stat)(location));case 3:stats = _context5.sent;_context5.next = 10;break;case 6:_context5.prev = 6;_context5.t0 = _context5["catch"](0);

                console.warn("Could not get stat", _context5.t0);return _context5.abrupt("return");case 10:return _context5.abrupt("return",


                stats);case 11:case "end":return _context5.stop();}}}, _callee5, null, [[0, 6]]);}));function getStats(_x6) {return _getStats.apply(this, arguments);}return getStats;}()


    /**
                                                                                                                                                                                           * Wrapper for stats isDirectory()
                                                                                                                                                                                           * @param {string} location
                                                                                                                                                                                           * @returns {boolean}
                                                                                                                                                                                           */ }, { key: "isDir", value: function () {var _isDir = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(
      location) {var stats;return regeneratorRuntime.wrap(function _callee6$(_context6) {while (1) {switch (_context6.prev = _context6.next) {case 0:_context6.next = 2;return (
                  FileManager.getStats(location));case 2:stats = _context6.sent;if (!
                stats) {_context6.next = 5;break;}return _context6.abrupt("return",
                stats.isDirectory());case 5:return _context6.abrupt("return",

                false);case 6:case "end":return _context6.stop();}}}, _callee6);}));function isDir(_x7) {return _isDir.apply(this, arguments);}return isDir;}()


    /**
                                                                                                                                                                 * Wrapper for stats isFile()
                                                                                                                                                                 * @param {string} location
                                                                                                                                                                 * @returns {boolean}
                                                                                                                                                                 */ }, { key: "isFile", value: function () {var _isFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(
      location) {var stats;return regeneratorRuntime.wrap(function _callee7$(_context7) {while (1) {switch (_context7.prev = _context7.next) {case 0:_context7.next = 2;return (
                  FileManager.getStats(location));case 2:stats = _context7.sent;if (!
                stats) {_context7.next = 5;break;}return _context7.abrupt("return",
                stats.isFile());case 5:return _context7.abrupt("return",

                false);case 6:case "end":return _context7.stop();}}}, _callee7);}));function isFile(_x8) {return _isFile.apply(this, arguments);}return isFile;}()


    /**
                                                                                                                                                                    * Read entire file and return the data
                                                                                                                                                                    * if no encoding is set, a raw buffer is returned.
                                                                                                                                                                    * Use 'utf8' for string
                                                                                                                                                                    * @param {string} location
                                                                                                                                                                    */ }, { key: "readFile", value: function () {var _readFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(
      location) {var encoding,data,_args8 = arguments;return regeneratorRuntime.wrap(function _callee8$(_context8) {while (1) {switch (_context8.prev = _context8.next) {case 0:encoding = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : undefined;_context8.prev = 1;_context8.next = 4;return (


                  (0, _es6Promisify.promisify)(_fs["default"].readFile)(location, encoding));case 4:data = _context8.sent;_context8.next = 11;break;case 7:_context8.prev = 7;_context8.t0 = _context8["catch"](1);

                console.warn("Could not readFile", location, _context8.t0);return _context8.abrupt("return");case 11:return _context8.abrupt("return",


                data);case 12:case "end":return _context8.stop();}}}, _callee8, null, [[1, 7]]);}));function readFile(_x9) {return _readFile.apply(this, arguments);}return readFile;}()


    // static async read(location, buffer = undefined) {
    //   const dataBuffer = buffer ? buffer : new Buffer();
    //   try {
    //     await promisify(fs.read)(location, dataBuffer);
    //   }
    // }

    /**
     * Read a XML file and parse it into a json object using xml2js
     * @param {string} - location
     * @returns {object} - a json object
     */ }, { key: "readXmlFile", value: function () {var _readXmlFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee9(
      location) {var data, result;return regeneratorRuntime.wrap(function _callee9$(_context9) {while (1) {switch (_context9.prev = _context9.next) {case 0:_context9.next = 2;return (
                  FileManager.readFile(location));case 2:data = _context9.sent;if (!

                data) {_context9.next = 13;break;}_context9.prev = 4;_context9.next = 7;return (

                  (0, _es6Promisify.promisify)(_xml2js["default"].parseString)(data, {
                    attrkey: "attr",
                    charkey: "val",
                    trim: true }));case 7:result = _context9.sent;_context9.next = 13;break;case 10:_context9.prev = 10;_context9.t0 = _context9["catch"](4);


                console.warn("Error parsing xml file:", location, _context9.t0);case 13:return _context9.abrupt("return",


                result);case 14:case "end":return _context9.stop();}}}, _callee9, null, [[4, 10]]);}));function readXmlFile(_x10) {return _readXmlFile.apply(this, arguments);}return readXmlFile;}()


    /**
                                                                                                                                                                                                       * Recursively searches a directory and returns a flat array of all files
                                                                                                                                                                                                       *
                                                                                                                                                                                                       * @param {string} directoryName - the base directory to search
                                                                                                                                                                                                       * @param {array} _results - private. holds _results for recursive search
                                                                                                                                                                                                       * @returns {array} - an array of file path strings
                                                                                                                                                                                                       */ }, { key: "findAllFiles", value: function () {var _findAllFiles = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee10(
      directoryName) {var _results,files,_iterator2,_step2,file,fullPath,subdir,_args10 = arguments;return regeneratorRuntime.wrap(function _callee10$(_context10) {while (1) {switch (_context10.prev = _context10.next) {case 0:_results = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : [];if (!(

                directoryName === "..")) {_context10.next = 3;break;}return _context10.abrupt("return");case 3:_context10.prev = 3;_context10.next = 6;return (




                  FileManager.readDir(directoryName));case 6:files = _context10.sent;_context10.next = 13;break;case 9:_context10.prev = 9;_context10.t0 = _context10["catch"](3);

                console.error("Error reading directory", directoryName, _context10.t0);return _context10.abrupt("return",
                _results);case 13:_iterator2 = _createForOfIteratorHelper(


                files);_context10.prev = 14;_iterator2.s();case 16:if ((_step2 = _iterator2.n()).done) {_context10.next = 33;break;}file = _step2.value;
                fullPath = _path["default"].join(directoryName, file);_context10.t1 =
                file !== ".";if (!_context10.t1) {_context10.next = 24;break;}_context10.next = 23;return FileManager.isDir(fullPath);case 23:_context10.t1 = _context10.sent;case 24:if (!_context10.t1) {_context10.next = 30;break;}_context10.next = 27;return (
                  FileManager.findAllFiles(fullPath, _results));case 27:subdir = _context10.sent;_context10.next = 31;break;case 30:


                _results.push(fullPath);case 31:_context10.next = 16;break;case 33:_context10.next = 38;break;case 35:_context10.prev = 35;_context10.t2 = _context10["catch"](14);_iterator2.e(_context10.t2);case 38:_context10.prev = 38;_iterator2.f();return _context10.finish(38);case 41:return _context10.abrupt("return",


                _results);case 42:case "end":return _context10.stop();}}}, _callee10, null, [[3, 9], [14, 35, 38, 41]]);}));function findAllFiles(_x11) {return _findAllFiles.apply(this, arguments);}return findAllFiles;}()


    // static async findAllFiles(directoryName) {
    //   let files = [];
    //   let allFiles = [];
    //   try {
    //     files = await FileManager.readDir(directoryName);
    //   } catch (err) {
    //     console.error("Error reading directory", directoryName, err);
    //     return;
    //   }

    //   for (let file of files) {
    //     const fullPath = path.join(directoryName, file);
    //     if (await FileManager.isDir(fullPath)) {
    //       allFiles = allFiles.concat(await FileManager.findAllFiles(fullPath));
    //       return;
    //     } else {
    //       allFiles = allFiles.concat(fullPath);
    //     }
    //   }
    //   return allFiles;
    // }

    /**
     * Get the contents of a directory
     * @param {string} directory
     * @returns {array}
     */ }, { key: "readDir", value: function () {var _readDir = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee11(
      directory) {return regeneratorRuntime.wrap(function _callee11$(_context11) {while (1) {switch (_context11.prev = _context11.next) {case 0:return _context11.abrupt("return",
                new Promise(function (resolve, reject) {
                  _fs["default"].readdir(directory, function (err, content) {
                    if (err) {
                      reject(err);
                    } else {
                      resolve(content);
                    }
                  });
                }));case 1:case "end":return _context11.stop();}}}, _callee11);}));function readDir(_x12) {return _readDir.apply(this, arguments);}return readDir;}()


    /**
                                                                                                                                                                       * Recursively search directory for files with the given extension
                                                                                                                                                                       *
                                                                                                                                                                       * @param {string} directoryName - the dir to start search in
                                                                                                                                                                       * @param {string} findExt - the file extension to search for
                                                                                                                                                                       * @param {array} _results - private. holds results for recursive search
                                                                                                                                                                       * @returns {array} - an array of file path strings
                                                                                                                                                                       */ }, { key: "findFilesWithExt", value: function () {var _findFilesWithExt = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee12(
      directoryName, findExt) {var _results,files,ext,_iterator3,_step3,f,fullPath,_args12 = arguments;return regeneratorRuntime.wrap(function _callee12$(_context12) {while (1) {switch (_context12.prev = _context12.next) {case 0:_results = _args12.length > 2 && _args12[2] !== undefined ? _args12[2] : [];_context12.next = 3;return (
                  (0, _es6Promisify.promisify)(_fs["default"].readdir)(directoryName, {
                    withFileTypes: true }));case 3:files = _context12.sent;


                ext = findExt.substr(0, 1) === "." ? findExt : ".".concat(findExt);_iterator3 = _createForOfIteratorHelper(

                files);_context12.prev = 6;_iterator3.s();case 8:if ((_step3 = _iterator3.n()).done) {_context12.next = 19;break;}f = _step3.value;
                fullPath = _path["default"].join(directoryName, f.name);if (!
                f.isDirectory()) {_context12.next = 16;break;}_context12.next = 14;return (
                  FileManager.findFilesWithExt(fullPath, findExt, _results));case 14:_context12.next = 17;break;case 16:

                if (_path["default"].extname(fullPath) === ext) {
                  _results.push(fullPath);
                }case 17:_context12.next = 8;break;case 19:_context12.next = 24;break;case 21:_context12.prev = 21;_context12.t0 = _context12["catch"](6);_iterator3.e(_context12.t0);case 24:_context12.prev = 24;_iterator3.f();return _context12.finish(24);case 27:return _context12.abrupt("return",


                _results);case 28:case "end":return _context12.stop();}}}, _callee12, null, [[6, 21, 24, 27]]);}));function findFilesWithExt(_x13, _x14) {return _findFilesWithExt.apply(this, arguments);}return findFilesWithExt;}()


    /**
                                                                                                                                                                                                                                        * Checks if a file already exists at the given location
                                                                                                                                                                                                                                        *
                                                                                                                                                                                                                                        * @param {string} path - file path to test
                                                                                                                                                                                                                                        * @returns {boolean}
                                                                                                                                                                                                                                        */ }, { key: "fileExists", value: function () {var _fileExists = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee13(
      path) {var stats;return regeneratorRuntime.wrap(function _callee13$(_context13) {while (1) {switch (_context13.prev = _context13.next) {case 0:_context13.prev = 0;_context13.next = 3;return (

                  (0, _es6Promisify.promisify)(_fs["default"].stat)(path));case 3:stats = _context13.sent;if (!
                stats.isFile()) {_context13.next = 6;break;}return _context13.abrupt("return",
                true);case 6:_context13.next = 12;break;case 8:_context13.prev = 8;_context13.t0 = _context13["catch"](0);


                console.warn("Could not detect file", path, _context13.t0);return _context13.abrupt("return",
                false);case 12:return _context13.abrupt("return",


                false);case 13:case "end":return _context13.stop();}}}, _callee13, null, [[0, 8]]);}));function fileExists(_x15) {return _fileExists.apply(this, arguments);}return fileExists;}()


    /**
                                                                                                                                                                                                    * Checks if a directory already exists at the given location
                                                                                                                                                                                                    * @param {string} path - dir to test
                                                                                                                                                                                                    * @returns {boolean}
                                                                                                                                                                                                    */ }, { key: "dirExists", value: function () {var _dirExists = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee14(
      path) {var stats;return regeneratorRuntime.wrap(function _callee14$(_context14) {while (1) {switch (_context14.prev = _context14.next) {case 0:_context14.prev = 0;_context14.next = 3;return (

                  (0, _es6Promisify.promisify)(_fs["default"].stat)(path));case 3:stats = _context14.sent;if (!
                stats.isDirectory()) {_context14.next = 6;break;}return _context14.abrupt("return",
                true);case 6:_context14.next = 11;break;case 8:_context14.prev = 8;_context14.t0 = _context14["catch"](0);return _context14.abrupt("return",



                false);case 11:return _context14.abrupt("return",


                false);case 12:case "end":return _context14.stop();}}}, _callee14, null, [[0, 8]]);}));function dirExists(_x16) {return _dirExists.apply(this, arguments);}return dirExists;}()


    /**
                                                                                                                                                                                                 * Recursive directory copy
                                                                                                                                                                                                 * @param {string} src - path to the directory to copy
                                                                                                                                                                                                 * @param {string} dest - path to the copy destination
                                                                                                                                                                                                 */ }, { key: "copyDir", value: function () {var _copyDir = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee15(
      src, dest) {var entries, _iterator4, _step4, entry, srcPath, destPath;return regeneratorRuntime.wrap(function _callee15$(_context15) {while (1) {switch (_context15.prev = _context15.next) {case 0:_context15.next = 2;return (
                  (0, _es6Promisify.promisify)(_fs["default"].readdir)(src, { withFileTypes: true }));case 2:entries = _context15.sent;_context15.prev = 3;_context15.next = 6;return (

                  (0, _es6Promisify.promisify)(_fs["default"].mkdir)(dest));case 6:_context15.next = 12;break;case 8:_context15.prev = 8;_context15.t0 = _context15["catch"](3);

                console.error("copyDir Error: Could not mkdir", dest, _context15.t0.message);throw _context15.t0;case 12:_iterator4 = _createForOfIteratorHelper(



                entries);_context15.prev = 13;_iterator4.s();case 15:if ((_step4 = _iterator4.n()).done) {_context15.next = 28;break;}entry = _step4.value;
                srcPath = _path["default"].join(src, entry.name);
                destPath = _path["default"].join(dest, entry.name);if (!
                entry.isDirectory()) {_context15.next = 24;break;}_context15.next = 22;return (
                  FileManager.copyDir(srcPath, destPath));case 22:_context15.next = 26;break;case 24:_context15.next = 26;return (

                  (0, _es6Promisify.promisify)(_fs["default"].copyFile)(srcPath, destPath));case 26:_context15.next = 15;break;case 28:_context15.next = 33;break;case 30:_context15.prev = 30;_context15.t1 = _context15["catch"](13);_iterator4.e(_context15.t1);case 33:_context15.prev = 33;_iterator4.f();return _context15.finish(33);case 36:case "end":return _context15.stop();}}}, _callee15, null, [[3, 8], [13, 30, 33, 36]]);}));function copyDir(_x17, _x18) {return _copyDir.apply(this, arguments);}return copyDir;}()




    /**
wrapper for os.tmpdir that resolves symlinks
see: https://github.com/nodejs/node/issues/11422
}, { key: "getTmpDir", value: function () {var _getTmpDir = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee16() {var tmpDir;return regeneratorRuntime.wrap(function _callee16$(_context16) {while (1) {switch (_context16.prev = _context16.next) {case 0:if (!(

                FileManager.environment === "node")) {_context16.next = 14;break;}_context16.prev = 1;_context16.next = 4;return (

                  (0, _es6Promisify.promisify)(_fs["default"].realpath)(_os["default"].tmpdir));case 4:tmpDir = _context16.sent;return _context16.abrupt("return",
                tmpDir);case 8:_context16.prev = 8;_context16.t0 = _context16["catch"](1);

                console.error("Error in getTmpDir", _context16.t0.message);throw _context16.t0;case 12:_context16.next = 15;break;case 14:return _context16.abrupt("return",



                "/tmp");case 15:case "end":return _context16.stop();}}}, _callee16, null, [[1, 8]]);}));function getTmpDir() {return _getTmpDir.apply(this, arguments);}return getTmpDir;}() }, { key: "resolveIriToEpubLocation", value: function resolveIriToEpubLocation(



    iri, referencePath) {
      if (iri.indexOf("http") === 0) {
        return iri;
      } else {
        return _path["default"].join(_path["default"].dirname(referencePath), iri);
      }
    } }, { key: "absolutePathToEpubLocation", value: function absolutePathToEpubLocation(

    epubPath, resourcePath) {
      return _path["default"].relative(epubPath, resourcePath);
    } }, { key: "epubLocationToAbsolutePath", value: function epubLocationToAbsolutePath(

    epubPath, resourcePath) {
      return _path["default"].join(_path["default"].dirname, epubPath, resourcePath);
    } }, { key: "virtualPath", get: function get() {return "/epubkit";} /**
                                                                         * Public class property environment.
                                                                         * environment indicates if we are running in a browser or not.
                                                                         * @returns {string} - one of "browser" or "node"
                                                                         */ }, { key: "environment", get: function get() {var _process, _process$env; // for testing in jest we sometimes need to force the env node_env
      if ((_process = process) === null || _process === void 0 ? void 0 : (_process$env = _process.env) === null || _process$env === void 0 ? void 0 : _process$env.MOCK_ENV) {return process.env.MOCK_ENV;}return typeof window === "undefined" ? "node" : "browser";} }]);return FileManager;}();var _default = FileManager;exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,