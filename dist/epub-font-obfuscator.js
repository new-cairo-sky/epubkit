"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.fontObfuscation = fontObfuscation;exports.idpfFontObfuscation = idpfFontObfuscation;exports.adobeFontObfuscation = adobeFontObfuscation;exports.getAdobeKeyFromIdentifier = getAdobeKeyFromIdentifier;exports.getIdpfKeyFromIdentifier = getIdpfKeyFromIdentifier;var _jssha = _interopRequireDefault(require("jssha"));
var _utf = _interopRequireDefault(require("utf8"));
var _xml = require("./utils/xml.js");function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

/**
 * The Epub font obfuscation spec is a self-inverting XOR process.
 * To unobfuscate just run the obfuscated font through the obfuscator again.
 * Based on the java implementations found at
 * https://github.com/dita4publishers/epub-font-obfuscator
 * and the C++ implementation at:
 * https://github.com/Sigil-Ebook/Sigil/blob/master/src/Misc/FontObfuscation.cpp
 *
 * The spec is found at:
 * https://www.w3.org/publishing/epub32/epub-ocf.html#sec-resource-obfuscation
 */

/**
 * Uses the data from the package Opf and encryption.xml to find obfuscation method and key
 * TODO: this assumes that all fonts are obfuscated with the same method
 * The fontLocation option should be used to id the font obfuscation method within encrpytion.xml
 * @param {Buffer | Uint8Array} fontData - source font data
 * @param {string} opfXml - xml of opf file
 * @param {string} encryptionXml - xml of encryption.xml file
 * @param {string} fontLocation - (optional) the location of the font relative to the epub root
 */
async function fontObfuscation(
fontData,
opfXml,
encryptionXml,
fontLocation = undefined)
{var _fontEncryptedData, _fontEncryptedData$en, _fontEncryptedData$en2;
  const parsedOpfXml = await (0, _xml.parseXml)(opfXml);
  const parsedEncryptionXml = await (0, _xml.parseXml)(encryptionXml);
  const packageUniqueIdName = parsedOpfXml.package.attr["unique-identifier"];
  const uniqueIdEl = parsedOpfXml.package.metadata[0]["dc:identifier"].find(
  idEl => {
    return idEl.attr.id === packageUniqueIdName;
  });

  const uniqueId = uniqueIdEl.val;

  let fontEncryptedData;
  if (fontLocation) {var _parsedEncryptionXml$;
    // if fontLocation is provided, look for it in the encryption references
    fontEncryptedData = parsedEncryptionXml === null || parsedEncryptionXml === void 0 ? void 0 : (_parsedEncryptionXml$ = parsedEncryptionXml.encryption) === null || _parsedEncryptionXml$ === void 0 ? void 0 : _parsedEncryptionXml$[
    "enc:encrypteddata"].
    find(encryptedData => {var _encryptedData$encCi, _encryptedData$encCi$;
      const cipherReference = encryptedData === null || encryptedData === void 0 ? void 0 : (_encryptedData$encCi = encryptedData["enc:cipherdata"]) === null || _encryptedData$encCi === void 0 ? void 0 : (_encryptedData$encCi$ = _encryptedData$encCi[0]) === null || _encryptedData$encCi$ === void 0 ? void 0 : _encryptedData$encCi$[
      "enc:cipherreference"].
      find(ref => ref.attr.uri === fontLocation);
      if (cipherReference) {
        return true;
      } else {
        return false;
      }
    });
  } else {
    // otherwise look to see if either adobe or idpf is listed at all and take the first one found
    fontEncryptedData = parsedEncryptionXml.encryption[
    "enc:encrypteddata"].
    find(encryptedData => {var _encryptedData$encEn, _encryptedData$encEn$;
      const method =
      encryptedData === null || encryptedData === void 0 ? void 0 : (_encryptedData$encEn = encryptedData["enc:encryptionmethod"]) === null || _encryptedData$encEn === void 0 ? void 0 : (_encryptedData$encEn$ = _encryptedData$encEn[0].attr) === null || _encryptedData$encEn$ === void 0 ? void 0 : _encryptedData$encEn$.algorithm;
      return (
        method.indexOf("ns.adobe.com/pdf/enc") ||
        method.indexOf("www.idpf.org/2008/embedding"));

    });
  }
  const obfMethod = (_fontEncryptedData =
  fontEncryptedData) === null || _fontEncryptedData === void 0 ? void 0 : (_fontEncryptedData$en = _fontEncryptedData["enc:encryptionmethod"]) === null || _fontEncryptedData$en === void 0 ? void 0 : (_fontEncryptedData$en2 = _fontEncryptedData$en[0].attr) === null || _fontEncryptedData$en2 === void 0 ? void 0 : _fontEncryptedData$en2.algorithm;

  if (obfMethod && obfMethod.indexOf("ns.adobe.com/pdf/enc") !== -1) {
    return adobeFontObfuscation(fontData, uniqueId);
  } else if (
  obfMethod &&
  obfMethod.indexOf("www.idpf.org/2008/embedding") !== -1)
  {
    return idpfFontObfuscation(fontData, uniqueId);
  }
}

/**
 * Obfuscates/Unobfuscates the provided font data using the IDPF method.
 * The Obfuscation process is a self-inverting XOR process. Running this
 * method on an onfuscated font will unobfuscate it and vice-versa
 * @param {Buffer | Uint8Array} fontData - source data
 * @param {string} identifier - the opf id used to produce the sha-1 key
 * @returns {Uint8array} - the output data
 */
function idpfFontObfuscation(fontData, identifier) {
  let outputData = Uint8Array.from(fontData);
  const byteMask = getIdpfKeyFromIdentifier(identifier);

  if (byteMask.length !== 20) {
    console.error("idpfFontObfuscation Error: key is not 20 bytes");
    return;
  }

  for (let i = 0; i < 1040 && i < outputData.length; ++i) {
    outputData[i] = outputData[i] ^ byteMask[i % 20];
  }
  return outputData;
}

/**
 * Obfuscates the provided font data using the Adobe method.
 * The Obfuscation process is a self-inverting XOR process. Running this
 * method on an onfuscated font will unobfuscate it and vice-versa
 * @param {Buffer | Uint8Array} fontData - source data
 * @param {string} identifier - the opf id used to produce the sha-1 key
 * @returns {Uint8array} - the output data
 */
function adobeFontObfuscation(fontData, identifier) {
  let outputData = Uint8Array.from(fontData);
  const byteMask = getAdobeKeyFromIdentifier(identifier);

  if (byteMask.length === 0) {
    console.error("idpfFontObfuscation Error: key is empty");
    return;
  }

  for (let i = 0; i < 1024 && i < outputData.length; ++i) {
    outputData[i] = outputData[i] ^ byteMask[i % byteMask.length];
  }
  return outputData;
}

/**
 * Converts the OPF UID into binary buffer array used by the adobe font obfuscation spec.
 * Unfortunetly this requires the node Buffer module. For browser support epubkit relies
 * on the Buffer polyfill proided by BrowserFS (see the webpack config).
 *
 * @param {string} id - the UUID identified in the epub's opf
 * @returns {Buffer}
 */
function getAdobeKeyFromIdentifier(id) {
  const cleanId = id.
  replace("urn:uuid:", "").
  replace(/-/g, "").
  replace(/:/g, "");

  // the key is treated as raw hex data.
  return Buffer.from(cleanId, "hex");
}

/**
 * Converts the OPF UID into a key used by the IDPF font obfuscation spec.
 * @param {string} id - the UUID identified in the epub's opf
 */
function getIdpfKeyFromIdentifier(id) {
  const cleanId = id.replace(/[\u0020\u0009\u000D\u000A]/g, "");
  const utf8Key = _utf.default.encode(cleanId);
  // "A SHA-1 digest of the UTF-8 representation of the resulting string"
  const sha = new _jssha.default("SHA-1", "TEXT", { encoding: "UTF8" });
  sha.update(utf8Key);
  const shaKey = sha.getHash("UINT8ARRAY");
  return shaKey;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,